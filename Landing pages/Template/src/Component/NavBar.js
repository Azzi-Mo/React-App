"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireWildcard(require("react")),_Data=_interopRequireDefault(require("./Data"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _getRequireWildcardCache(e){var r,t;return"function"!=typeof WeakMap?null:(r=new WeakMap,t=new WeakMap,(_getRequireWildcardCache=function(e){return e?t:r})(e))}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!==_typeof(e)&&"function"!=typeof e)return{default:e};r=_getRequireWildcardCache(r);if(r&&r.has(e))return r.get(e);var t,a,n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&((a=o?Object.getOwnPropertyDescriptor(e,t):null)&&(a.get||a.set)?Object.defineProperty(n,t,a):n[t]=e[t]);return n.default=e,r&&r.set(e,n),n}function _slicedToArray(e,r){return _arrayWithHoles(e)||_iterableToArrayLimit(e,r)||_unsupportedIterableToArray(e,r)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var a,n,o,l,u=[],i=!0,c=!1;try{if(o=(t=t.call(e)).next,0===r){if(Object(t)!==t)return;i=!1}else for(;!(i=(a=o.call(t)).done)&&(u.push(a.value),u.length!==r);i=!0);}catch(e){c=!0,n=e}finally{try{if(!i&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(c)throw n}}return u}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){var t;if(e)return"string"==typeof e?_arrayLikeToArray(e,r):"Map"===(t="Object"===(t=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:t)||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,r):void 0}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,a=new Array(r);t<r;t++)a[t]=e[t];return a}var allCategories=_toConsumableArray(new Set(_Data.default.map(function(e){return e.category}))),_useState=(0,_react.useState)(allCategories),_useState2=_slicedToArray(_useState,2),categories=_useState2[0],setCategories=_useState2[1],NavBar=function(){return _react.default.createElement("section",{className:"navbar container"},_react.default.createElement("div",{className:"Logo"},_react.default.createElement("img",{decoding:"async",className:"logo",src:"./imgaes/logo.png",alt:"navbar logo"})),_react.default.createElement("div",{className:"icon"},_react.default.createElement("i",{className:"fa-solid fa-bars"}),_react.default.createElement("ul",null,categories.map(function(e,r){return _react.default.createElement("li",{key:r},_react.default.createElement("a",null,e))}))))},_default=NavBar;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
